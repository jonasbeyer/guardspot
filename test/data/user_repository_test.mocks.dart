// Mocks generated by Mockito 5.0.10 from annotations
// in guardspot/test/data/user_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i8;

import 'package:dio/src/dio.dart' as _i2;
import 'package:firebase_core/firebase_core.dart' as _i5;
import 'package:firebase_messaging/firebase_messaging.dart' as _i11;
import 'package:firebase_messaging_platform_interface/src/notification_settings.dart'
    as _i6;
import 'package:firebase_messaging_platform_interface/src/remote_message.dart'
    as _i12;
import 'package:guardspot/data/user/user_service.dart' as _i7;
import 'package:guardspot/data/user/user_store.dart' as _i10;
import 'package:guardspot/models/schedule_entry.dart' as _i9;
import 'package:guardspot/models/user.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rxdart/src/streams/value_stream.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDio extends _i1.Fake implements _i2.Dio {}

class _FakeUser extends _i1.Fake implements _i3.User {}

class _FakeValueStream<T> extends _i1.Fake implements _i4.ValueStream<T> {}

class _FakeFirebaseApp extends _i1.Fake implements _i5.FirebaseApp {
  @override
  String toString() => super.toString();
}

class _FakeNotificationSettings extends _i1.Fake
    implements _i6.NotificationSettings {}

/// A class which mocks [UserService].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserService extends _i1.Mock implements _i7.UserService {
  MockUserService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(Invocation.getter(#dio), returnValue: _FakeDio())
          as _i2.Dio);
  @override
  _i8.Future<void> signUp(String? name, String? email, String? password,
          {String? urlJoinCode}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signUp, [name, email, password], {#urlJoinCode: urlJoinCode}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i3.User> signIn(String? email, String? password,
          [String? pushToken]) =>
      (super.noSuchMethod(
              Invocation.method(#signIn, [email, password, pushToken]),
              returnValue: Future<_i3.User>.value(_FakeUser()))
          as _i8.Future<_i3.User>);
  @override
  _i8.Future<void> confirmEmail(String? code) =>
      (super.noSuchMethod(Invocation.method(#confirmEmail, [code]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> resendConfirmationEmail(String? email) =>
      (super.noSuchMethod(Invocation.method(#resendConfirmationEmail, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> requestPasswordReset(String? email) =>
      (super.noSuchMethod(Invocation.method(#requestPasswordReset, [email]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> changePassword(String? token, String? password) =>
      (super.noSuchMethod(Invocation.method(#changePassword, [token, password]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i3.User> getMe() => (super.noSuchMethod(
          Invocation.method(#getMe, []),
          returnValue: Future<_i3.User>.value(_FakeUser()))
      as _i8.Future<_i3.User>);
  @override
  _i8.Future<List<_i9.ScheduleEntry>> getMySchedule() =>
      (super.noSuchMethod(Invocation.method(#getMySchedule, []),
              returnValue:
                  Future<List<_i9.ScheduleEntry>>.value(<_i9.ScheduleEntry>[]))
          as _i8.Future<List<_i9.ScheduleEntry>>);
  @override
  _i8.Future<void> updateLocation(double? latitude, double? longitude) => (super
      .noSuchMethod(Invocation.method(#updateLocation, [latitude, longitude]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
}

/// A class which mocks [UserStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserStore extends _i1.Mock implements _i10.UserStore {
  MockUserStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void saveUser(_i3.User? user) =>
      super.noSuchMethod(Invocation.method(#saveUser, [user]),
          returnValueForMissingStub: null);
  @override
  void deleteUser() => super.noSuchMethod(Invocation.method(#deleteUser, []),
      returnValueForMissingStub: null);
  @override
  _i4.ValueStream<_i3.User?> observeUser() =>
      (super.noSuchMethod(Invocation.method(#observeUser, []),
              returnValue: _FakeValueStream<_i3.User?>())
          as _i4.ValueStream<_i3.User?>);
  @override
  _i8.Stream<bool> observeAuthState() =>
      (super.noSuchMethod(Invocation.method(#observeAuthState, []),
          returnValue: Stream<bool>.empty()) as _i8.Stream<bool>);
  @override
  bool isAuthenticated() =>
      (super.noSuchMethod(Invocation.method(#isAuthenticated, []),
          returnValue: false) as bool);
  @override
  bool hasOrganization() =>
      (super.noSuchMethod(Invocation.method(#hasOrganization, []),
          returnValue: false) as bool);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i11.FirebaseMessaging {
  MockFirebaseMessaging() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
      returnValue: _FakeFirebaseApp()) as _i5.FirebaseApp);
  @override
  set app(_i5.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(Invocation.getter(#isAutoInitEnabled),
          returnValue: false) as bool);
  @override
  _i8.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(Invocation.getter(#onTokenRefresh),
          returnValue: Stream<String>.empty()) as _i8.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i8.Future<_i12.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(Invocation.method(#getInitialMessage, []),
              returnValue: Future<_i12.RemoteMessage?>.value())
          as _i8.Future<_i12.RemoteMessage?>);
  @override
  _i8.Future<void> deleteToken() =>
      (super.noSuchMethod(Invocation.method(#deleteToken, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(Invocation.method(#getAPNSToken, []),
          returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  _i8.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
      Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
      returnValue: Future<String?>.value()) as _i8.Future<String?>);
  @override
  bool isSupported() => (super.noSuchMethod(Invocation.method(#isSupported, []),
      returnValue: false) as bool);
  @override
  _i8.Future<_i6.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(Invocation.method(#getNotificationSettings, []),
              returnValue: Future<_i6.NotificationSettings>.value(
                  _FakeNotificationSettings()))
          as _i8.Future<_i6.NotificationSettings>);
  @override
  _i8.Future<_i6.NotificationSettings> requestPermission(
          {bool? alert = true,
          bool? announcement = false,
          bool? badge = true,
          bool? carPlay = false,
          bool? criticalAlert = false,
          bool? provisional = false,
          bool? sound = true}) =>
      (super.noSuchMethod(
              Invocation.method(#requestPermission, [], {
                #alert: alert,
                #announcement: announcement,
                #badge: badge,
                #carPlay: carPlay,
                #criticalAlert: criticalAlert,
                #provisional: provisional,
                #sound: sound
              }),
              returnValue: Future<_i6.NotificationSettings>.value(
                  _FakeNotificationSettings()))
          as _i8.Future<_i6.NotificationSettings>);
  @override
  _i8.Future<void> sendMessage(
          {String? to,
          Map<String, String>? data,
          String? collapseKey,
          String? messageId,
          String? messageType,
          int? ttl}) =>
      (super.noSuchMethod(
          Invocation.method(#sendMessage, [], {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setAutoInitEnabled(bool? enabled) =>
      (super.noSuchMethod(Invocation.method(#setAutoInitEnabled, [enabled]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> setForegroundNotificationPresentationOptions(
          {bool? alert = false, bool? badge = false, bool? sound = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setForegroundNotificationPresentationOptions, [],
              {#alert: alert, #badge: badge, #sound: sound}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#subscribeToTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(Invocation.method(#unsubscribeFromTopic, [topic]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i8.Future<void>);
}
